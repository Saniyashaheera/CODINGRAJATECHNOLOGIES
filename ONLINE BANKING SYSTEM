import java.sql.*;

public class OnlineBankingSystem {
    
    // Database connection setup
    private static final String URL = "jdbc:sqlite:banking.db";
    
    public static Connection connect() {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(URL);
            System.out.println("Connection to SQLite has been established.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return conn;
    }
    
    // User authentication
    public static boolean authenticateUser(String username, String password) {
        String sql = "SELECT user_id FROM Users WHERE username = ? AND password = ?";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, username);
            pstmt.setString(2, password);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }
    
    // Account management
    public static boolean createAccount(int userId, String accountType, double balance) {
        String sql = "INSERT INTO Accounts(user_id, account_type, balance) VALUES(?, ?, ?)";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setString(2, accountType);
            pstmt.setDouble(3, balance);
            pstmt.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }
    
    // Transaction history
    public static void displayTransactionHistory(int accountId) {
        String sql = "SELECT * FROM Transactions WHERE account_id = ?";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                System.out.println("Transaction ID: " + rs.getInt("transaction_id") + 
                                   ", Amount: " + rs.getDouble("amount") + 
                                   ", Type: " + rs.getString("transaction_type") + 
                                   ", Date: " + rs.getString("date"));
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    // Funds transfer
    public static boolean transferFunds(int fromAccountId, int toAccountId, double amount) {
        if (updateBalance(fromAccountId, -amount) && updateBalance(toAccountId, amount)) {
            recordTransaction(fromAccountId, amount, "withdrawal");
            recordTransaction(toAccountId, amount, "deposit");
            return true;
        }
        return false;
    }
    
    // Balance enquiry
    public static double getBalance(int accountId) {
        String sql = "SELECT balance FROM Accounts WHERE account_id = ?";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getDouble("balance");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return 0.0;
    }
    
    // Loan management
    public static boolean applyForLoan(int userId, double amount, double interestRate, int duration) {
        String sql = "INSERT INTO Loans(user_id, amount, interest_rate, duration) VALUES(?, ?, ?, ?)";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setDouble(2, amount);
            pstmt.setDouble(3, interestRate);
            pstmt.setInt(4, duration);
            pstmt.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }
    
    // Helper methods
    private static boolean updateBalance(int accountId, double amount) {
        String sql = "UPDATE Accounts SET balance = balance + ? WHERE account_id = ?";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setDouble(1, amount);
            pstmt.setInt(2, accountId);
            pstmt.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }

    private static boolean recordTransaction(int accountId, double amount, String transactionType) {
        String sql = "INSERT INTO Transactions(account_id, amount, transaction_type, date) VALUES(?, ?, ?, datetime('now'))";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountId);
            pstmt.setDouble(2, amount);
            pstmt.setString(3, transactionType);
            pstmt.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }

    // Main method to demonstrate functionality
    public static void main(String[] args) {
        // Sample data
        int userId = 1;  // Assume this user ID exists in Users table

        // Authenticate user
        if (authenticateUser("john_doe", "password123")) {
            System.out.println("User authenticated successfully!");

            // Create account
            if (createAccount(userId, "savings", 1000.00)) {
                System.out.println("Account created successfully!");
            }

            // Transfer funds
            int fromAccountId = 1;  // Assume this account ID exists
            int toAccountId = 2;    // Assume this account ID exists
            if (transferFunds(fromAccountId, toAccountId, 100.00)) {
                System.out.println("Funds transferred successfully!");
            }

            // Display transaction history
            displayTransactionHistory(fromAccountId);

            // Check balance
            double balance = getBalance(fromAccountId);
            System.out.println("Balance for account ID " + fromAccountId + ": " + balance);

            // Apply for loan
            if (applyForLoan(userId, 5000.00, 5.5, 36)) {
                System.out.println("Loan application successful!");
            }
        } else {
            System.out.println("Authentication failed.");
        }
    }
}
